package de.unidue.beckend_gruppe_q.controller;

import de.unidue.beckend_gruppe_q.model.Card;
import de.unidue.beckend_gruppe_q.model.Lootbox;
import de.unidue.beckend_gruppe_q.model.User;
import de.unidue.beckend_gruppe_q.repository.LootboxRepository;
import de.unidue.beckend_gruppe_q.repository.UserRepository;
import de.unidue.beckend_gruppe_q.service.LootboxGenerator;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;
import java.util.NoSuchElementException;

@CrossOrigin
@RestController
public class LootboxController {


    private final LootboxGenerator lootboxGenerator;

    private final UserRepository userRepository;
    private final LootboxRepository lootboxRepository;

    public LootboxController(LootboxGenerator lootboxGenerator, UserRepository userRepository, LootboxRepository lootboxRepository) {
        this.lootboxGenerator = lootboxGenerator;
        this.userRepository = userRepository;
        this.lootboxRepository = lootboxRepository;
    }

    /**
     * lootbox should  be generated by the admin instead of user
     * find the lootboxes according to the type,we take only the first lootbox,then check if user has enough points,
     * then user should spend points to buy and save the user's new status
     * and the lootbox will be deleted
     *
     * @param lootboxId
     * @param userId
     * @return
     */
    @PostMapping("/user/buyLootbox/{userId}/{lootboxId}")
    public ResponseEntity<?> buyLootbox(@PathVariable Long userId, @PathVariable Long lootboxId) {
        User user = userRepository.findById(userId).orElseThrow(() -> new NoSuchElementException("User not found"));
        Lootbox lootbox = lootboxRepository.findById(lootboxId).orElseThrow(() -> new NoSuchElementException("Lootbox not found"));
        if (user.getSepCoins() < lootbox.getPrice()) {
            return ResponseEntity.status(HttpStatus.FORBIDDEN).body("Not Enough SEP-Coins");
        }
        user.setSepCoins(user.getSepCoins() - lootbox.getPrice());
        user.getLootboxes().add(lootbox);
        userRepository.save(user);
        return ResponseEntity.ok("Lootbox successfully purchased");
    }

    /**
     * according to the userId,it finds all the lootboxes user has,then make them to a stream,
     * filter it with lootboxId,find the first element among possible many elements
     * then add all the cards in the lootbox to the user's cardRepository and remove the lootbox from the user
     *
     * @param userId
     * @param lootboxId
     * @return
     */
    @PostMapping("/user/openLootbox/{userId}/{lootboxId}")
    public ResponseEntity<List<Card>> openLootbox(@PathVariable Long userId, @PathVariable Long lootboxId) {
        User user = userRepository.findById(userId).orElseThrow(NoSuchElementException::new);
        Lootbox lootbox = user.getLootboxes().stream()
                .filter(l -> l.getId().equals(lootboxId))
                .findFirst()
                .orElseThrow(() -> new NoSuchElementException("No such Lootbox found" + lootboxId));
        Lootbox dynamicLootbox = lootboxGenerator.generateLootbox(lootbox.getLootboxType());
        System.out.println(dynamicLootbox);
        user.getCards().addAll(dynamicLootbox.getCards());
        userRepository.save(user);
        lootboxRepository.delete(lootbox);
        System.out.println(user.getCards());
        return ResponseEntity.ok(dynamicLootbox.getCards());
    }

    @PostMapping("user/claimLootbox/{userId}")
    public ResponseEntity<?> claimLootbox(@PathVariable Long userId) {

        User user = userRepository.findById(userId).orElseThrow(NoSuchElementException::new);

        if (user.getLootboxes().get(0) == null) {
            return ResponseEntity.status(HttpStatus.FORBIDDEN).body("No such lootbox");
        }
        Lootbox goldLootbox = user.getLootboxes().get(0);

        lootboxRepository.delete(goldLootbox);


        return ResponseEntity.ok(goldLootbox.getCards());


    }

}
